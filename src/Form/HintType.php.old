<?php

namespace App\Form;

use App\Entity\Hint;
use App\Entity\Type;
use App\Entity\Character;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\CallbackTransformer;
use Symfony\Component\HttpFoundation\File\File;
use Vich\UploaderBundle\Form\Type\VichFileType;
use Symfony\Component\Form\FormBuilderInterface;
use Vich\UploaderBundle\Form\Type\VichImageType;
use Symfony\Component\String\Slugger\AsciiSlugger;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\DateType;

use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Validator\Constraints\File as FileConstraint;

class HintType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('Text')
            ->add('logoFile', VichImageType::class);
            /*
            ->add('logo', FileType::class, [
                'label' => 'Logo',
                'mapped' => false,
                'required' => false,
                'constraints' => [
                    new FileConstraint([
                        'maxSize' => '10000k',
                        'mimeTypes' => [
                            'image/jpg',
                            'image/jpeg',
                            'image/png'
                        ],
                        'mimeTypesMessage' => 'veuillez upload une image jpg/jpeg/png'
                    ])
                    ]
                //'data_class' => null
            ]) 
            //->add('plante')
        ;*/

        /* 
        $builder->get('logo')
           ->addModelTransformer(new CallbackTransformer(
                
                function ($logoAsFile) {
                    // transform file as a string
                    if (!$logoAsFile)
                    {
                        return "";
                    }

                    
                    $slugger = new AsciiSlugger();
                    $originaleFilename = pathinfo($logoAsFile->getClientOriginalName(), PATHINFO_FILENAME);
                    $safeFilename = $slugger->slug($originaleFilename);
                    $newFileName = $safeFilename . '-' . uniqid() . '.' . $logoAsFile->guessExtension();

                    
                    try {
                        //todo : changer filepath
                        $logoAsFile->move('uploads/pictures', $newFileName);
                    } catch (FileException $e) {
                        echo '<script>alert("Erreur lors de l\'enregistrement d\'un logo d\'indice")</script>';
                    }
                    
                    return $newFileName;
                },
                function ($logoAsString) {
                    // transform the string as a file
                    //todo : changer filepath
                    if ($logoAsString == ""){
                        $logoAsString = 'default.png';
                    } 
                    return new File('uploads/pictures'. '/' . $logoAsString, false);

                }
            ))
        ;*/


    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Hint::class,
        ]);
    }
}
